# This file is used to build the release binaries for the Tauri GUI
name: "Publish GUI release to GitHub"

on:
  release:
    types: [created]

concurrency:
  group: build-gui-release-${{ github.event.release.tag_name }}
  cancel-in-progress: true

jobs:
  publish-tauri:
    # Do not publish preview releases to Github.
    # Building takes too long for preview releases.
    # if: ${{ !contains(github.ref_name, 'preview') }} Temporarily disabled
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-13" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-24.04" # We build on an older version to support older glib versions
            args: "--bundles deb,appimage"
          # Temporarily disabled Windows builds
          # - platform: "windows-latest"
          #   args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Set up environment variables
        uses: ./.github/actions/set-monero-env

      - uses: actionhippie/swap-space@v1
        if: matrix.platform == env.UBUNTU_PLATFORM_ID
        with:
          size: 15G

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@1.80
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Configure apt for retries (ubuntu only)
        if: matrix.platform == env.UBUNTU_PLATFORM_ID
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == env.UBUNTU_PLATFORM_ID # This must match the platform value defined above.
        run: |
          sudo apt update;
          sudo apt install -y ${{ env.DEPS_MONERO_LINUX }} ${{ env.DEPS_GUI_UBUNTU_SPECIFIC }} git
          
      - name: Get OpenSSL location
        if: matrix.platform == env.UBUNTU_PLATFORM_ID
        run: |
          which openssl
          openssl version
          echo "OPENSSL_PATH=$(which openssl)" >> $GITHUB_ENV

      - name: Install Monero build dependencies (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew update
          brew install ${{ env.DEPS_MONERO_MACOS }} git
          brew reinstall --build-from-source unbound expat  
          brew install protobuf@21

      - name: Install Monero build dependencies (Windows)
        if: matrix.platform == env.WINDOWS_PLATFORM_ID
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: ${{ env.DEPS_MONERO_WINDOWS_MSYS2 }} git

      - name: Clone submodules
        run: git submodule update --init --recursive

      - name: work around spurious network errors in curl 8.0
        shell: bash
        run: |
          echo "CARGO_HTTP_MULTIPLEXING=false" >> $GITHUB_ENV

      - name: install frontend dependencies
        working-directory: src-gui
        # Set the yarn network timeout to a high value to avoid spurious network errors
        run: yarn install --network-timeout 600000

      - name: install tauri-cli globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: tauri-cli@2.1.0
          
      - name: install typeshare-cli globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: typeshare-cli

      - name: install dprint globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: dprint@0.50.0

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD:  ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ github.event.release.id }}
          projectPath: src-tauri
          args: ${{ matrix.args }}
          tauriScript: cargo tauri