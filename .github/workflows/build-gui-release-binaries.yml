# This file is used to build the release binaries for the Tauri GUI
name: "Build eigenwallet release"

on:
  pull_request:
  release:
    types: [created]

concurrency:
  group: build-gui-release-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.event.release.tag_name }}
  cancel-in-progress: true

jobs:
  draft-cb-release:
    # don't do it for PR's
    if: ${{ github.event_name != 'pull_request' && !contains(github.ref_name, 'preview') }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set env variables
        uses: ./.github/actions/set-monero-env

      - name: Create Draft Release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release draft ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  build_gui:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - host: "macos-latest" # for Arm based macs (M1 and above).
            target: "aarch64-apple-darwin"
          - host: "macos-13" # for Intel based macs.
            target: "x86_64-apple-darwin"
          - host: "ubuntu-24.04"
            target: "x86_64-unknown-linux-gnu"
          - host: "ubuntu-24.04" # cross build windows from ubuntu
            target: "x86_64-pc-windows-gnu"

    runs-on: ${{ matrix.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment (cli tools, dependencies)
        uses: ./.github/actions/setup-build-environment
        with:
          host: ${{ matrix.host }}
          target: ${{ matrix.target }}

      - name: build tauri app and upload to github releases page
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          # Empty releaseId for PRs prevents uploading to GitHub releases
          # Empty strings are treated as an omitted argument: https://github.com/actions/runner/issues/924
          # When releaseId is omitted, no release is published: https://github.com/tauri-apps/tauri-action?tab=readme-ov-file#tips-and-caveats
          releaseId: ${{ github.event.release.id || '' }}
          projectPath: src-tauri
          tauriScript: yarn tauri
          args: --target ${{ matrix.target }}

      # TODO: Remove this duplication of the steps in build-release-binaries.yml
      - name: Install GnuPG (macOS)
        if: github.event_name == 'release' && runner.os == 'macOS'
        shell: bash
        run: |
          brew install gnupg

      - name: Install GnuPG (Linux)
        if: github.event_name == 'release' && runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gnupg

      - name: Import GPG private key
        if: github.event_name == 'release'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        shell: bash
        run: |
          set -euo pipefail

          if [[ -z "${GPG_PRIVATE_KEY:-}" ]]; then
            echo "GPG_PRIVATE_KEY secret is not set." >&2
            exit 1
          fi

          export GNUPGHOME="$(mktemp -d)"
          chmod 700 "$GNUPGHOME"

          # Allow loopback pinentry when passphrase is provided
          echo "allow-loopback-pinentry" >> "$GNUPGHOME/gpg-agent.conf"
          echo "use-agent" >> "$GNUPGHOME/gpg.conf"
          gpgconf --reload gpg-agent || true

          # Import ASCII-armored or binary private key material
          printf "%s" "$GPG_PRIVATE_KEY" | gpg --batch --import

          # Grab the first secret key fingerprint and expose it to later steps
          FPR="$(gpg --batch --list-secret-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')"
          if [[ -z "$FPR" ]]; then
            echo "Failed to import a signing key." >&2
            exit 1
          fi

          echo "GNUPGHOME=$GNUPGHOME" >> "$GITHUB_ENV"
          echo "GPG_FPR=$FPR" >> "$GITHUB_ENV"

      - name: Sign artifacts with GPG
        if: github.event_name == 'release'
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        shell: bash
        run: |
          set -euo pipefail

          # Find all release artifacts (excluding .sig files from Tauri updater)
          find src-tauri/target/${{ matrix.target }}/release/bundle -type f \
            ! -name "*.sig" \
            ! -name "*.asc" \
            -print0 | while IFS= read -r -d '' file; do
            echo "Signing: $file"
            gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" \
              -u "$GPG_FPR" --armor --output "${file}.asc" --detach-sign "$file"
          done

      - name: Upload artifact signatures to GitHub release
        if: github.event_name == 'release'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Find all .asc signature files we just created
          find src-tauri/target/${{ matrix.target }}/release/bundle -type f -name "*.asc" -print0 | while IFS= read -r -d '' sig_file; do
            echo "Uploading signature: $sig_file"
            # Get just the filename for the asset name
            asset_name=$(basename "$sig_file")
            
            gh release upload "${{ github.event.release.tag_name }}" \
              "$sig_file" \
              --clobber
          done

      - name: upload to crabnebula release (not for previews)
        if: ${{ github.event_name != 'pull_request' && !contains(github.ref_name, 'preview') }}
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
          args: --target ${{ matrix.target }}

  publish:
    # don't publish previews to crabnebula
    if: ${{ github.event_name != 'pull_request' && !contains(github.ref_name, 'preview') }}
    needs: [draft-cb-release, build_gui]
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set env variables
        uses: ./.github/actions/set-monero-env

      - name: Publish Release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release publish ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
