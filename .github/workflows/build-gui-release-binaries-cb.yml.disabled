# This file is used to build the preview release binaries for the Tauri GUI with CloudNebula integration
name: "Publish GUI release to CloudNebula"

on:
  release:
    types: [created]

concurrency:
  group: build-gui-release-cb-${{ github.event.release.tag_name }}
  cancel-in-progress: true

env:
# We build on an older version to support older glib versions
  UBUNTU: "ubuntu-24.04"
  MACOS_ARM: "macos-latest"
  MACOS_INTEL: "macos-13"
  WINDOWS: "windows-latest"
  CN_APPLICATION: "unstoppableswap/unstoppableswap-gui-rs"
  DEPS_MONERO_LINUX: 'build-essential cmake libboost-all-dev miniupnpc libunbound-dev graphviz doxygen libunwind8-dev pkg-config libssl-dev libzmq3-dev libsodium-dev libhidapi-dev libusb-1.0-0-dev libprotobuf-dev protobuf-compiler git'
  DEPS_GUI_UBUNTU_SPECIFIC: 'libgtk-3-dev libappindicator3-dev librsvg2-dev libwebkit2gtk-4.1-0=2.44.0-2 libwebkit2gtk-4.1-dev=2.44.0-2 libjavascriptcoregtk-4.1-0=2.44.0-2 libjavascriptcoregtk-4.1-dev=2.44.0-2 gir1.2-javascriptcoregtk-4.1=2.44.0-2 gir1.2-webkit2-4.1=2.44.0-2'
  DEPS_MONERO_MACOS: 'cmake boost hidapi openssl zmq libpgm miniupnpc expat libunwind-headers protobuf'
  DEPS_MONERO_WINDOWS_MSYS2: >-
    mingw-w64-x86_64-toolchain
    make
    mingw-w64-x86_64-cmake
    mingw-w64-x86_64-boost
    mingw-w64-x86_64-openssl
    mingw-w64-x86_64-zeromq
    mingw-w64-x86_64-libsodium
    mingw-w64-x86_64-hidapi
    mingw-w64-x86_64-protobuf-c
    mingw-w64-x86_64-libusb
    mingw-w64-x86_64-unbound
    git
  APT_SET_CONF_COMMAND: |
    sudo tee -a /etc/apt/apt.conf.d/80-custom << EOF
    Acquire::Retries "3";
    Acquire::http::Timeout "120";
    Acquire::ftp::Timeout "120";
    EOF

jobs:
  draft-cb-release:
    # Do not publish preview releases to CloudNebula
    if: ${{ !contains(github.ref_name, 'preview') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Draft Release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release draft ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  build:
    needs: draft-cb-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"   # For Arm-based Macs (M1 and above)
            args: "--target aarch64-apple-darwin"
          - platform: "macos-13"       # For Intel-based Macs
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-24.04"
            args: ""
          # Temporarily disabled Windows builds
          # - platform: "windows-latest"
          #   args: ""
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install Rust Stable
        uses: dtolnay/rust-toolchain@1.80
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Configure apt for retries (ubuntu only)
        if: matrix.platform == env.UBUNTU
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == env.UBUNTU # This must match the platform value defined above.
        run: |
          sudo apt update;
          sudo apt install -y ${{ env.DEPS_MONERO_LINUX }} ${{ env.DEPS_GUI_UBUNTU_SPECIFIC }} git

      - name: Install Monero build dependencies (macOS)
        if: startsWith(matrix.platform, 'macos')
        run: |
          brew update
          brew install ${{ env.DEPS_MONERO_MACOS }} git
          brew reinstall --build-from-source unbound expat 
          brew install protobuf@21

      - name: Install Monero build dependencies (Windows)
        if: matrix.platform == env.WINDOWS
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: ${{ env.DEPS_MONERO_WINDOWS_MSYS2 }} git

      - name: Clone submodules
        run: git submodule update --init --recursive

      - name: Work around spurious network errors in curl 8.0
        shell: bash
        run: |
          echo "CARGO_HTTP_MULTIPLEXING=false" >> $GITHUB_ENV

      - name: Install Frontend Dependencies
        working-directory: src-gui
        # Set the yarn network timeout to a high value to avoid spurious network errors
        run: yarn install --network-timeout 600000

      - name: install tauri-cli globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: tauri-cli@2.1.0
          
      - name: install typeshare-cli globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: typeshare-cli

      - name: install dprint globally
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: dprint@0.50.0

      - name: Build Tauri App
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD:  ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          cargo tauri build ${{ matrix.args }}

      - name: Upload Assets
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release upload ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actionhippie/swap-space@v1
        with:
          size: 15G

      - name: Publish Release
        uses: crabnebula-dev/cloud-release@v0
        with:
          command: release publish ${{ env.CN_APPLICATION }} --framework tauri
          api-key: ${{ secrets.CN_API_KEY }}
