name: "Build swap and asb release binaries"

on:
  release:
    types: [created]

env:
  DOCKER_IMAGE_NAME: ghcr.io/eigenwallet/asb

concurrency:
  group: build-release-${{ github.event.release.tag_name }}
  cancel-in-progress: true

jobs:
  build_binaries:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        target:
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-22.04
            archive_extension: tar
            do_smoke_test: true
            ext: ""
          - target: aarch64-apple-darwin
            host: macos-latest
            archive_extension: tar
            do_smoke_test: true
            ext: ""
          - target: x86_64-apple-darwin
            host: macos-13
            archive_extension: tar
            do_smoke_test: true
            ext: ""
          # Once Windows works again, uncomment
          - target: x86_64-pc-windows-gnu
            host: ubuntu-22.04
            archive_extension: zip
            do_smoke_test: false
            ext: ".exe"

        bin:
          - name: swap
            smoke_test_args: "--help"
            smoke_test_fake_interactive: false
          - name: asb
            smoke_test_args: "--help"
            smoke_test_fake_interactive: false
          - name: asb-controller
            smoke_test_args: ""
            smoke_test_fake_interactive: false
          - name: orchestrator
            smoke_test_args: ""
            smoke_test_fake_interactive: true

    runs-on: ${{ matrix.target.host }}

    steps:
      - name: Checkout tagged commit
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.event.release.target_commitish }}
          token: ${{ secrets.BOTTY_GITHUB_TOKEN }}
          submodules: recursive

      - name: Set up environment variables
        uses: ./.github/actions/set-monero-env

      - uses: actionhippie/swap-space@v1
        if: matrix.os == 'ubuntu-latest'
        with:
          size: 15G

      - name: Restore Rust/Cargo cache from S3
        uses: whywaita/actions-cache-s3@v2
        with:
          path: |
            ~/.rustup
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-rust-${{ hashFiles('**/Cargo.lock') }}
          aws-s3-bucket: ${{ secrets.S3_BUCKET_NAME }}
          aws-region: eu-central-1
          aws-endpoint: ${{ secrets.S3_ENDPOINT_URL }}
          aws-s3-force-path-style: true
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}

      - name: Install Rust toolchain (no internal cache)
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: ""
          cache-directories: ""

      - name: Configure apt for retries
        if: matrix.os == 'ubuntu-latest'
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }} git

      - name: Smoke test the binary
        if: matrix.target != 'armv7-unknown-linux-gnueabihf'
        run: target/${{ matrix.target }}/release/${{ matrix.bin }} --help

      - id: create-archive-name
        shell: python
        run: |
          import os

          target = "${{ matrix.target.target }}"
          triple = target.split("-")
          arch = triple[0]
          target_os = triple[2].lower()

          os_mapping = {"linux": "Linux", "windows": "Windows", "darwin": "Darwin"}
          
          if target_os not in os_mapping:
              raise ValueError(f"Unknown target OS: {target_os}")

          system = os_mapping[target_os]

          archive_name=f'${{ matrix.bin.name }}_${{ github.event.release.tag_name || format('pull_request_{0}', github.event.pull_request.number) }}_{system}_{arch}.${{ matrix.target.archive_extension }}'
          with open(os.environ['GITHUB_OUTPUT'], 'a') as output_file:
              output_file.write(f'archive={archive_name}\n')

      - name: Pack macos archive
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: gtar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack linux archive
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: tar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack windows archive
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.bin }}.exe ./${{ matrix.bin }}.exe
          7z a -tzip ${{ steps.create-archive-name.outputs.archive }} ./${{ matrix.bin }}.exe

      - name: Install GnuPG (macOS)
        if: github.event_name == 'release' && runner.os == 'macOS'
        shell: bash
        run: |
          brew install gnupg

      - name: Install GnuPG (Linux)
        if: github.event_name == 'release' && runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gnupg

      - name: Import GPG private key
        if: github.event_name == 'release'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        shell: bash
        run: |
          set -euo pipefail

          if [[ -z "${GPG_PRIVATE_KEY:-}" ]]; then
            echo "GPG_PRIVATE_KEY secret is not set." >&2
            exit 1
          fi

          export GNUPGHOME="$(mktemp -d)"
          chmod 700 "$GNUPGHOME"

          # Allow loopback pinentry when passphrase is provided
          echo "allow-loopback-pinentry" >> "$GNUPGHOME/gpg-agent.conf"
          echo "use-agent" >> "$GNUPGHOME/gpg.conf"
          gpgconf --reload gpg-agent || true

          # Import ASCII-armored or binary private key material
          printf "%s" "$GPG_PRIVATE_KEY" | gpg --batch --import

          # Grab the first secret key fingerprint and expose it to later steps
          FPR="$(gpg --batch --list-secret-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')"
          if [[ -z "$FPR" ]]; then
            echo "Failed to import a signing key." >&2
            exit 1
          fi

          echo "GNUPGHOME=$GNUPGHOME" >> "$GITHUB_ENV"
          echo "GPG_FPR=$FPR" >> "$GITHUB_ENV"

      - name: Sign archive with GPG
        if: github.event_name == 'release'
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        shell: bash
        run: |
          set -euo pipefail
          ARCHIVE="${{ steps.create-archive-name.outputs.archive }}"

          gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" \
                -u "$GPG_FPR" --armor --output "${ARCHIVE}.asc" --detach-sign "$ARCHIVE"

      - name: Upload archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.create-archive-name.outputs.archive }}
          asset_name: ${{ steps.create-archive-name.outputs.archive }}
          asset_content_type: application/gzip

      - name: Upload archive signature (.asc)
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.create-archive-name.outputs.archive }}.asc
          asset_name: ${{ steps.create-archive-name.outputs.archive }}.asc
          asset_content_type: application/pgp-signature

  build_and_push_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build_binaries
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.event.release.target_commitish }}
          submodules: recursive
          
      - name: Set up environment variables
        uses: ./.github/actions/set-monero-env

      - uses: actionhippie/swap-space@v1
        with:
          size: 15G

      - name: Configure apt for retries
        run: ${{ env.APT_SET_CONF_COMMAND }}

      - name: Install dependencies (ubuntu-latest)
        run: |
          sudo apt update
          sudo apt install -y ${{ env.DEPS_TAURI_LINUX }} ${{ env.DEPS_MONERO_LINUX }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker tags
        id: docker_tags
        run: |
          if [[ ${{ github.event.release.tag_name }} == "preview" ]]; then
            echo "preview=true" >> $GITHUB_OUTPUT
          else
            echo "preview=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
        if: steps.docker_tags.outputs.preview == 'false'

      - name: Build and push Docker image without latest tag (preview release)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
        if: steps.docker_tags.outputs.preview == 'true'