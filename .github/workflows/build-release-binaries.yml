name: "Build swap, asb, asb-controller, and orchestrator release binaries"

on:
  pull_request:
  release:
    types: [created]

env:
  DOCKER_ASB_IMAGE_NAME: ghcr.io/eigenwallet/asb
  DOCKER_ASB_CONTROLLER_IMAGE_NAME: ghcr.io/eigenwallet/asb-controller

concurrency:
  group: build-release-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.event.release.tag_name }}
  cancel-in-progress: true

jobs:
  build_binaries:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        # which binaries we want to build
        bin: [swap, asb, asb-controller, orchestrator]
        # which target to build from which host and the archive we use
        include:
          - {
              target: x86_64-unknown-linux-gnu,
              host: ubuntu-22.04,
              archive_extension: tar,
            }
          - {
              target: aarch64-apple-darwin,
              host: macos-latest,
              archive_extension: tar,
            }
          - {
              target: x86_64-apple-darwin,
              host: macos-13,
              archive_extension: tar,
            }
          - {
              target: x86_64-pc-windows-gnu,
              host: ubuntu-22.04,
              archive_extension: zip,
            }

    runs-on: ${{ matrix.host }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment (cli tools, dependencies)
        uses: ./.github/actions/setup-build-environment
        with:
          host: ${{ matrix.host }}
          target: ${{ matrix.target }}

      - name: Build ${{ matrix.bin }} in release mode
        run: |
          BIN_PATH="$(
            cargo build --bin ${{ matrix.bin }} --target ${{ matrix.target }} --release -q --message-format=json \
            | jq -r "select(.reason == \"compiler-artifact\" and .executable != null) | .executable"
          )"
          echo "BIN_PATH=$BIN_PATH" >> $GITHUB_ENV

      - name: Smoke test the binary
        if: matrix.bin != 'orchestrator' # ignore orchestrator, since it's interactive
        run: ${{ env.BIN_PATH }} --help

      - id: create-archive-name
        shell: python
        run: |
          import platform
          import os

          os_info = platform.uname()

          arch = os_info.machine

          triple = "${{ matrix.target }}".split("-")
          arch = triple[0]

          archive_name=f'${{ matrix.bin }}_${{ github.event.release.tag_name || format('pull_request_{0}', github.event.pull_request.number) }}_{os_info.system}_{arch}.${{ matrix.archive_extension }}'

          with open(os.environ['GITHUB_OUTPUT'], 'a') as output_file:
              output_file.write(f'archive={archive_name}\n')

      - name: Pack Linux/Mac binary (tar)
        if: matrix.archive_extension == 'tar'
        shell: bash
        run: |
          tar -cf ${{ steps.create-archive-name.outputs.archive }} -C $(dirname ${{ env.BIN_PATH }}) $(basename ${{ env.BIN_PATH }})

      - name: Pack Windows binary (zip)
        if: matrix.archive_extension == 'zip'
        shell: bash
        run: |
          zip ${{ steps.create-archive-name.outputs.archive }} -j ${{ env.BIN_PATH }}

      - name: Upload archive
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.create-archive-name.outputs.archive }}
          asset_name: ${{ steps.create-archive-name.outputs.archive }}
          asset_content_type: application/gzip

  build_and_push_docker:
    name: Build and Push Docker Image
    if: github.event_name == 'release'
    runs-on: ubuntu-22.04
    needs: build_binaries
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment (cli tools, dependencies)
        uses: ./.github/actions/setup-build-environment
        with:
          host: ubuntu-22.04

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker tags
        id: docker_tags
        run: |
          if [[ ${{ github.event.release.tag_name }} == "preview" ]]; then
            echo "preview=true" >> $GITHUB_OUTPUT
          else
            echo "preview=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image (asb)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./swap-asb/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_ASB_IMAGE_NAME }}:${{ github.event.release.tag_name }}
            ${{ env.DOCKER_ASB_IMAGE_NAME }}:latest
        if: steps.docker_tags.outputs.preview == 'false'

      - name: Build and push Docker image without latest tag (preview release) (asb)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./swap-asb/Dockerfile
          push: true
          tags: ${{ env.DOCKER_ASB_IMAGE_NAME }}:${{ github.event.release.tag_name }}
        if: steps.docker_tags.outputs.preview == 'true'

      - name: Build and push Docker image (asb-controller)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./swap-controller/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_ASB_CONTROLLER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
            ${{ env.DOCKER_ASB_CONTROLLER_IMAGE_NAME }}:latest
        if: steps.docker_tags.outputs.preview == 'false'

      - name: Build and push Docker image without latest tag (preview release) (asb-controller)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./swap-controller/Dockerfile
          push: true
          tags: ${{ env.DOCKER_ASB_CONTROLLER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
        if: steps.docker_tags.outputs.preview == 'true'
