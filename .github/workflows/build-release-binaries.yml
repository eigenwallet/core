name: "Build swap, asb, asb-controller, and orchestrator release binaries"

on:
  release:
    types: [created]

env:
  DOCKER_IMAGE_NAME: ghcr.io/eigenwallet/asb

concurrency:
  group: build-release-${{ github.event.release.tag_name }}
  cancel-in-progress: true

jobs:
  build_binaries:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        bin: [swap, asb, asb-controller, orchestrator]
        target:
          [
            x86_64-unknown-linux-gnu,
            aarch64-apple-darwin,
            x86_64-apple-darwin,
            x86_64-pc-windows-gnu,
          ]
        host: [ubuntu-22.04] # default host: ubuntu
        archive_extension: [tar] # default extension: tar
        include:
          # build for arm macos on arm macos
          - target: aarch64-apple-darwin
            host: macos-latest
          # build for intel macos on intel macos
          - target: x86_64-apple-darwin
            host: macos-13
          # use .zip for windows
          - target: x86_64-pc-windows-gnu
            archive_extension: zip

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment (cli tools, dependencies)
        uses: ./.github/actions/setup-build-environment
        with:
          host: ${{ matrix.host }}
          rust-targets: ${{ matrix.target }}

      - name: Smoke test the binary
        if: matrix.bin != 'orchestrator' # ignore orchestrator, since it's interactive
        run: target/${{ matrix.target }}/release/${{ matrix.bin }} --help

      - id: create-archive-name
        shell: python
        run: |
          import platform
          os_info = platform.uname()

          arch = os_info.machine

          triple = "${{ matrix.target }}".split("-")
          arch = triple[0]

          archive_name=f'${{ matrix.bin }}_${{ github.event.release.tag_name }}_{os_info.system}_{arch}.${{ matrix.archive_extension }}'

          print(f'::set-output name=archive::{archive_name}')

      - name: Pack macos archive
        if: contains(matrix.target, 'macos')
        shell: bash
        run: gtar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack linux archive
        if: contains(matrix.target, 'ubuntu')
        shell: bash
        run: tar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack windows archive
        if: contains(matrix.target, 'windows')
        shell: bash
        run: |
          cp target/${{ matrix.target }}/release/${{ matrix.bin }}.exe ./${{ matrix.bin }}.exe
          7z a -tzip ${{ steps.create-archive-name.outputs.archive }} ./${{ matrix.bin }}.exe

      - name: Upload archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.BOTTY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.create-archive-name.outputs.archive }}
          asset_name: ${{ steps.create-archive-name.outputs.archive }}
          asset_content_type: application/gzip

  build_and_push_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build_binaries
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment (cli tools, dependencies)
        uses: ./.github/actions/setup-build-environment
        with:
          host: ubuntu-latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Docker tags
        id: docker_tags
        run: |
          if [[ ${{ github.event.release.tag_name }} == "preview" ]]; then
            echo "preview=true" >> $GITHUB_OUTPUT
          else
            echo "preview=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image (asb)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./swap-asb/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
        if: steps.docker_tags.outputs.preview == 'false'

      - name: Build and push Docker image without latest tag (preview release) (asb)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./swap-asb/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
        if: steps.docker_tags.outputs.preview == 'true'

      - name: Build and push Docker image (asb-controller)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./swap-controller/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
        if: steps.docker_tags.outputs.preview == 'false'

      - name: Build and push Docker image without latest tag (preview release) (asb-controller)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./swap-controller/Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.event.release.tag_name }}
        if: steps.docker_tags.outputs.preview == 'true'
