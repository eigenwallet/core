/*
 * Intercambio.app API
 *
 * API endpoint for retrieving path information from Intercambio.app, including detailed state and trade information.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use reqwest::header::CONTENT_TYPE;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`api_eigenwallet_create_path_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiEigenwalletCreatePathGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_eigenwallet_create_path_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiEigenwalletCreatePathPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_eigenwallet_get_path_path_uuid_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiEigenwalletGetPathPathUuidGetError {
    Status404(models::PathResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`api_eigenwallet_get_path_path_uuid_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApiEigenwalletGetPathPathUuidPostError {
    Status404(models::PathResponse),
    UnknownValue(serde_json::Value),
}

/// Creates a new trade path based on the provided parameters.  Although supports GET, it is recommended to use POST with a JSON body for parameter submission. The endpoint processes currency conversion parameters, creates a path, and returns the path UUID. If invalid parameters (e.g., priority not in ['rate', 'kyc_grade']), returns an empty object.
pub async fn api_eigenwallet_create_path_get(
    configuration: &configuration::Configuration,
    create_path_request: models::CreatePathRequest,
) -> Result<models::CreatePathResponse, Error<ApiEigenwalletCreatePathGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_body_create_path_request = create_path_request;

    let uri_str = format!("{}/api/eigenwallet_create_path", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_create_path_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CreatePathResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CreatePathResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiEigenwalletCreatePathGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Creates a new trade path based on the provided JSON parameters. Processes currency conversion details, optional priorities, service inclusions/exclusions, and returns the path UUID. If invalid parameters (e.g., priority not in ['rate', 'kyc_grade']), returns an empty object.
pub async fn api_eigenwallet_create_path_post(
    configuration: &configuration::Configuration,
    create_path_request: models::CreatePathRequest,
) -> Result<models::CreatePathResponse, Error<ApiEigenwalletCreatePathPostError>> {
    let p_body_create_path_request = create_path_request;

    let uri_str = format!("{}/api/eigenwallet_create_path", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_body_create_path_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json | ContentType::Text | ContentType::Unsupported(_) => {
                serde_json::from_str(&content).map_err(Error::from)
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiEigenwalletCreatePathPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Fetches details about a trade path using the provided UUID.  The response includes URLs for clearnet and Tor, chat support links, the overall path state,  and optionally a list of trades if the path data is a list of trades. Supports both GET and POST methods, though no request body is required or utilized.
pub async fn api_eigenwallet_get_path_path_uuid_get(
    configuration: &configuration::Configuration,
    path_uuid: &str,
) -> Result<models::PathResponse, Error<ApiEigenwalletGetPathPathUuidGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_path_uuid = path_uuid;

    let uri_str = format!(
        "{}/api/eigenwallet_get_path/{path_uuid}",
        configuration.base_path,
        path_uuid = crate::apis::urlencode(p_path_path_uuid)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PathResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PathResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiEigenwalletGetPathPathUuidGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Identical to the GET method; fetches details about a trade path using the provided UUID. No request body is required or utilized.
pub async fn api_eigenwallet_get_path_path_uuid_post(
    configuration: &configuration::Configuration,
    path_uuid: &str,
) -> Result<models::PathResponse, Error<ApiEigenwalletGetPathPathUuidPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_path_uuid = path_uuid;

    let uri_str = format!(
        "{}/api/eigenwallet_get_path/{path_uuid}",
        configuration.base_path,
        path_uuid = crate::apis::urlencode(p_path_path_uuid)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom(
                "Received `text/plain` content type response that cannot be converted to `models::CreatePathResponse`"
            ))),
            ContentType::Unsupported(unknown_type) => {
                serde_json::from_str(&content).map_err(Error::from)
            }
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ApiEigenwalletGetPathPathUuidPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
