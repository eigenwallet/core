/*
 * Intercambio.app API
 *
 * API endpoint for retrieving path information from Intercambio.app, including detailed state and trade information.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Trade {
    /// The address to deposit the from_amount to.
    #[serde(rename = "deposit_address")]
    pub deposit_address: String,
    /// The amount to send in the from_currency.
    #[serde(rename = "from_amount")]
    pub from_amount: f64,
    #[serde(rename = "from_currency")]
    pub from_currency: Box<models::Currency>,
    /// The position of the trade in the path.
    #[serde(rename = "path_position")]
    pub path_position: i32,
    #[serde(rename = "provider")]
    pub provider: Box<models::TradeProvider>,
    #[serde(rename = "state")]
    pub state: Box<models::TradeState>,
    /// The amount to receive in the to_currency.
    #[serde(rename = "to_amount")]
    pub to_amount: f64,
    #[serde(rename = "to_currency")]
    pub to_currency: Box<models::Currency>,
    /// The address to withdraw the to_amount to.
    #[serde(rename = "withdrawal_address")]
    pub withdrawal_address: String,
}

impl Trade {
    pub fn new(deposit_address: String, from_amount: f64, from_currency: models::Currency, path_position: i32, provider: models::TradeProvider, state: models::TradeState, to_amount: f64, to_currency: models::Currency, withdrawal_address: String) -> Trade {
        Trade {
            deposit_address,
            from_amount,
            from_currency: Box::new(from_currency),
            path_position,
            provider: Box::new(provider),
            state: Box::new(state),
            to_amount,
            to_currency: Box::new(to_currency),
            withdrawal_address,
        }
    }
}

