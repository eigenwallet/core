/*
 * Intercambio.app API
 *
 * API endpoint for retrieving path information from Intercambio.app, including detailed state and trade information.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreatePathRequest {
    /// The amount to send from.
    #[serde(rename = "from_amount")]
    pub from_amount: f64,
    /// The from currency code, e.g., 'BTC' or 'BTC@BTC' (symbol@network).
    #[serde(rename = "from_currency")]
    pub from_currency: String,
    #[serde(rename = "include_services", skip_serializing_if = "Option::is_none")]
    pub include_services: Option<Box<models::CreatePathRequestIncludeServices>>,
    /// Priority for path creation (rate or KYC grade).
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<Priority>,
    /// Service variety filter. 'never_kyc' excludes services requiring KYC.
    #[serde(rename = "service_variety", skip_serializing_if = "Option::is_none")]
    pub service_variety: Option<ServiceVariety>,
    /// The withdrawal address for the to_currency.
    #[serde(rename = "to_address")]
    pub to_address: String,
    /// The to currency code, e.g., 'ETH' or 'ETH@ETH' (symbol@network).
    #[serde(rename = "to_currency")]
    pub to_currency: String,
}

impl CreatePathRequest {
    pub fn new(from_amount: f64, from_currency: String, to_address: String, to_currency: String) -> CreatePathRequest {
        CreatePathRequest {
            from_amount,
            from_currency,
            include_services: None,
            priority: None,
            service_variety: None,
            to_address,
            to_currency,
        }
    }
}
/// Priority for path creation (rate or KYC grade).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Priority {
    #[serde(rename = "rate")]
    Rate,
    #[serde(rename = "kyc_grade")]
    KycGrade,
}

impl Default for Priority {
    fn default() -> Priority {
        Self::Rate
    }
}
/// Service variety filter. 'never_kyc' excludes services requiring KYC.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceVariety {
    #[serde(rename = "all")]
    All,
    #[serde(rename = "never_kyc")]
    NeverKyc,
}

impl Default for ServiceVariety {
    fn default() -> ServiceVariety {
        Self::All
    }
}

