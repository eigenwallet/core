diff --git a/src/wallet/api/pending_transaction.cpp b/src/wallet/api/pending_transaction.cpp
index 2dd118ea3..f243109e5 100644
--- a/src/wallet/api/pending_transaction.cpp
+++ b/src/wallet/api/pending_transaction.cpp
@@ -78,6 +78,33 @@ std::vector<std::string> PendingTransactionImpl::txid() const
     return txid;
 }
 
+// This function returns **all** tx keys for the pending transaction.
+// If the transaction contains multiple transactions, this will return multiple tx keys.
+// If the transaction contains only a single transaction but that transaction has multiple tx keys, this will return multiple tx keys.
+//
+// Strictly speaking this does not allow us to clearly map tx keys to transactions if we have multiple transactions and one or more
+// of the transactions have multiple tx keys.
+std::vector<std::string> PendingTransactionImpl::txKeys() const
+{
+    std::vector<std::string> keys;
+    keys.reserve(m_pending_tx.size());
+
+    for (const auto &ptx : m_pending_tx)
+    {
+        std::string key = epee::string_tools::pod_to_hex(unwrap(unwrap(ptx.tx_key)));
+        keys.emplace_back(std::move(key));
+        
+        // TODO: According to moneromoo, its non standard behavior to have multiple tx keys
+        // We still provide return them here for the sake of correctness.
+        // Our Rust wrapper will then fail if it detects multiple tx keys.
+        for (const auto &additional_key : ptx.additional_tx_keys) {
+            keys.emplace_back(epee::string_tools::pod_to_hex(unwrap(unwrap(additional_key))));
+        }
+    }
+
+    return keys;
+}
+
 bool PendingTransactionImpl::commit(const std::string &filename, bool overwrite)
 {
 
diff --git a/src/wallet/api/pending_transaction.h b/src/wallet/api/pending_transaction.h
index c5f4328a8..c4c53f0a6 100644
--- a/src/wallet/api/pending_transaction.h
+++ b/src/wallet/api/pending_transaction.h
@@ -50,6 +50,7 @@ public:
     uint64_t dust() const override;
     uint64_t fee() const override;
     std::vector<std::string> txid() const override;
+    std::vector<std::string> txKeys() const override;
     uint64_t txCount() const override;
     std::vector<uint32_t> subaddrAccount() const override;
     std::vector<std::set<uint32_t>> subaddrIndices() const override;
