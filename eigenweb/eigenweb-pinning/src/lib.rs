use crate::signature::SignedMessage;
use bytes::Bytes;
use libp2p_identity::PeerId;
use serde::{Deserialize, Serialize};
use uuid::Uuid;

pub mod client;
pub mod codec;
pub mod futures_utils;
pub mod server;
pub mod signature;
pub mod storage;

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub struct UnsignedPinnedMessage {
    /// This ID is essentially a nonce
    /// It is generated by the sender and we cannot guarantee that it is unique
    /// If we need a unique identifier, we should hash the entire message
    pub id: Uuid,
    pub sender: PeerId,
    pub receiver: PeerId,
    pub ttl: u64,
    pub priority: u64,
    pub encrypted_content: Bytes,
}

pub type SignedPinnedMessage = SignedMessage<UnsignedPinnedMessage>;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PinRequest {
    pub message: SignedPinnedMessage,
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub enum PinResponse {
    Stored,
    Rejected(PinRejectReason),
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]
pub enum PinRejectReason {
    ResourceLimitExceeded,
    MalformedMessage,
    Other,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FetchRequest {}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct FetchResponse {
    /// Hashes of all messages where:
    ///    `hash.receiver == requester.peer_id ||Â hash.sender == requester.peer_id`
    pub messages: Vec<signature::MessageHash>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PullRequest {
    /// Hashes of all messages we want to download
    pub hashes: Vec<signature::MessageHash>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PullResponse {
    pub messages: Vec<SignedPinnedMessage>,
}
